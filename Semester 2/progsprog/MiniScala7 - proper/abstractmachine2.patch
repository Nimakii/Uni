diff --git a/src/miniscala/AbstractMachine.scala b/src/miniscala/AbstractMachine.scala
index a97f735..79f6fab 100644
--- a/src/miniscala/AbstractMachine.scala
+++ b/src/miniscala/AbstractMachine.scala
@@ -9,6 +9,7 @@ object AbstractMachine {
 
   sealed abstract class Instruction
   case class Const(c: Int) extends Instruction
+  case object Unit extends Instruction
   case object Add extends Instruction
   case object Sub extends Instruction
   case object Mul extends Instruction
@@ -20,47 +21,83 @@ object AbstractMachine {
   case object Or extends Instruction
   case object Neg extends Instruction
   case object Not extends Instruction
+  case object Dup extends Instruction
+  case object Pop extends Instruction
   case class Branch(thencode: List[Instruction], elsecode: List[Instruction]) extends Instruction
+  case class Loop(condcode: List[Instruction], bodycode: List[Instruction]) extends Instruction
   case object Enter extends Instruction
+  case class EnterDefs(num: Int) extends Instruction
   case class Exit(num: Int) extends Instruction
   case class Read(index: IdIndex) extends Instruction
+  case object Alloc extends Instruction
+  case object Load extends Instruction
+  case object Store extends Instruction
+  case class Lambda(freeids: List[IdIndex], body: List[Instruction]) extends Instruction
+  case class Call(arity: Int, tailcall: Boolean) extends Instruction
+  case object Return extends Instruction
 
   type IdIndex = Int // index of identifier in envstack
 
   def execute(program: Executable, initialEnv: List[Int]): Int = {
 
-    var code: List[Instruction] = program.code // the program code to be executed
-    val opstack = new mutable.ArrayStack[Int] // operand stack, contains values of sub-expressions
-    val envstack = new mutable.ArrayStack[Int] // environment stack, contains values of identifiers
+    sealed abstract class Value
+    case class IntVal(c: Int) extends Value
+    case class RefVal(loc: Loc) extends Value
+    class ClosureVal(val body: List[Instruction], var env: List[Value]) extends Value {
+      override def toString: String = s"Code($body)" // omitting env in toString to avoid infinite recursion
+    }
+
+    type Loc = Int // location in store
+
+    class Frame {
+      var code: List[Instruction] = Nil // the program code to be executed
+      val opstack = new mutable.ArrayStack[Value] // operand stack, contains values of sub-expressions
+      val envstack = new mutable.ArrayStack[Value] // environment stack, contains values of identifiers
+    }
+
+    var frame = new Frame // the current frame
+    frame.code = program.code
+    initialEnv.foreach(c => frame.envstack.push(IntVal(c)))
+
+    val callstack = new mutable.ArrayStack[Frame] // call stack (excluding the current frame)
+    val store = new mutable.ArrayBuffer[Value] // store, maps locations to values
+
+    def popInt() = frame.opstack.pop().asInstanceOf[IntVal].c
+
+    def popLoc() = frame.opstack.pop().asInstanceOf[RefVal].loc
 
-    initialEnv.foreach(c => envstack.push(c))
+    def popClosure() = frame.opstack.pop().asInstanceOf[ClosureVal]
 
     try {
-      while (code.nonEmpty) {
-        val inst = code.head
-        code = code.tail
-        trace(s"Current operand stack:     ${opstack.mkString("[", ", ", "]")}")
-        trace(s"Current environment stack: ${envstack.mkString("[", ", ", "]")}")
+      while (frame.code.nonEmpty) {
+        val inst = frame.code.head
+        frame.code = frame.code.tail
+        trace(s"Current operand stack:     ${frame.opstack.mkString("[", ", ", "]")}")
+        trace(s"Current environment stack: ${frame.envstack.mkString("[", ", ", "]")}")
+        trace(s"Call stack:                ${callstack.map(f => s"(${f.code.mkString("[", ", ", "]")}, ${f.opstack.mkString("[", ", ", "]")}, ${f.envstack.mkString("[", ", ", "]")})").mkString("[", ", ", "]")}")
+        trace(s"Store:                     ${store.mkString("[", ", ", "]")}")
         trace(s"Next instruction:          $inst")
         inst match {
           case Const(c) =>
-            opstack.push(c)
+            frame.opstack.push(IntVal(c))
+          case Unit =>
+            frame.opstack.push(IntVal(0)) // just represent unit as '0'
           case Add =>
-            val c2 = opstack.pop()
-            val c1 = opstack.pop()
-            opstack.push(c1 + c2)
+            val c2 = popInt()
+            val c1 = popInt()
+            frame.opstack.push(IntVal(c1 + c2))
           case Sub =>
-            val c2 = opstack.pop()
-            val c1 = opstack.pop()
-            opstack.push(c1 - c2)
+            val c2 = popInt()
+            val c1 = popInt()
+            frame.opstack.push(IntVal(c1 - c2))
           case Mul =>
-            val c2 = opstack.pop()
-            val c1 = opstack.pop()
-            opstack.push(c1 * c2)
+            val c2 = popInt()
+            val c1 = popInt()
+            frame.opstack.push(IntVal(c1 * c2))
           case Div =>
-            val c2 = opstack.pop()
-            val c1 = opstack.pop()
-            opstack.push(c1 / c2)
+            val c2 = popInt()
+            val c1 = popInt()
+            frame.opstack.push(IntVal(c1 / c2))
           case Eq =>
             ???
           case Lt =>
@@ -72,25 +109,67 @@ object AbstractMachine {
           case Or =>
             ???
           case Neg =>
-            val c = opstack.pop()
-            opstack.push(-c)
+            val c = popInt()
+            frame.opstack.push(IntVal(-c))
           case Not =>
             ???
+          case Dup =>
+            frame.opstack.dup()
+          case Pop =>
+            frame.opstack.pop()
           case Branch(thencode, elsecode) =>
-            if (opstack.pop() == 1)
-              code = thencode ++ code
+            if (popInt() == 1)
+              frame.code = thencode ++ frame.code
             else
-              code = elsecode ++ code
+              frame.code = elsecode ++ frame.code
+          case Loop(condcode, bodycode) =>
+            frame.code = Branch(bodycode ++ List(Loop(condcode, bodycode)), Nil) :: frame.code
           case Enter =>
             ???
           case Exit(num) =>
             for (i <- 1 to num)
-              envstack.pop()
+              frame.envstack.pop()
           case Read(index) =>
             ???
+          case Alloc =>
+            frame.opstack.push(RefVal(store.size))
+            store += IntVal(0)
+          case Load =>
+            val loc = popLoc()
+            frame.opstack.push(store(loc))
+          case Store =>
+            val v = frame.opstack.pop()
+            val loc = popLoc()
+            store(loc) = v
+          case Lambda(freeids, body) =>
+            val env = freeids.map(x => frame.envstack(x)) // creates env for free identifiers (excluding defs in same block)
+            frame.opstack.push(new ClosureVal(body, env))
+          case EnterDefs(num) =>
+            val cls = (1 to num).map(_ => popClosure()).reverse
+            cls.foreach(cl => {
+              cl.env = cl.env ++ cls.toList // adds all the closures to the env of each closure
+              frame.envstack.push(cl)
+            })
+          case Call(arity, tailcall) =>
+            val newframe = new Frame
+            for (i <- 1 to arity) // passes the values of the parameters
+              newframe.envstack.push(frame.opstack.pop())
+            val cl = popClosure()
+            for (v <- cl.env.reverse) // copies the values of the free identifiers (excluding defs in same block) followed by all the defs
+              newframe.envstack.push(v)
+            newframe.code = cl.body
+            callstack.push(frame)
+            frame = newframe
+          case Return =>
+            if (callstack.nonEmpty) {
+              val v = frame.opstack.pop()
+              frame = callstack.pop()
+              frame.opstack.push(v)
+            } else
+              frame.code = Nil // signal to terminate the execution loop
         }
       }
-      opstack.pop()
+      popInt()
     } catch {
       case ex: Exception => throw new AbstractMachineError(ex)
     }
diff --git a/src/miniscala/Compiler.scala b/src/miniscala/Compiler.scala
index 21c96dd..77383e9 100644
--- a/src/miniscala/Compiler.scala
+++ b/src/miniscala/Compiler.scala
@@ -7,21 +7,39 @@ object Compiler {
 
   def compile(e: Exp): Executable = {
 
-    def lookup(x: Id, idstack: List[Id]): IdIndex = {
+    case class IdDesc(x: Id, mutable: Boolean)
+
+    def lookup(x: Id, idstack: List[IdDesc]): (IdIndex, Boolean) = {
       // find the position of identifier x in idstack
-      val index = idstack.indexOf(x)
+      val index = idstack.indexWhere(p => p.x == x)
       if (index == -1) throw new Exception(s"$x not found")
-      index
+      // return the position and a boolean flag that indicates whether the identifier was declared with 'var'
+      (index, idstack(index).mutable)
+    }
+
+    def compileFun(params: List[FunParam], body: Exp, freeids: List[Id], defs: List[DefDecl], idstack: List[IdDesc]) = {
+      // prepare the new idstack for the function body, with an entry for each free non-def identifier, each def, and each parameter
+      val defids = defs.map(d => d.fun).toSet
+      val freenondefs = freeids.filterNot(defids.contains)
+      val freeidsstack = freenondefs.map(x => IdDesc(x, lookup(x, idstack)._2))
+      val defsstack = defs.map(d => IdDesc(d.fun, mutable = false))
+      val paramsstack = params.map(p => IdDesc(p.x, mutable = false))
+      // compile the function body
+      val bodycode = compile(body, freeidsstack ++ paramsstack ++ defsstack, ???) ++ List(Return)
+      // find idstack index for each free identifier (excluding defs in same block)
+      val indices = freenondefs.map(x => lookup(x, idstack)._1)
+      // produce a Lambda instruction
+      List(Lambda(indices, bodycode))
     }
 
-    def compile(e: Exp, idstack: List[Id]): List[Instruction] =
+    def compile(e: Exp, idstack: List[IdDesc], tailpos: Boolean): List[Instruction] =
       e match {
         case IntLit(c) =>
           List(Const(c))
         case BoolLit(c) =>
           ???
         case BinOpExp(leftexp, op, rightexp) =>
-          compile(leftexp, idstack) ++ compile(rightexp, idstack) ++ List(op match {
+          compile(leftexp, idstack, ???) ++ compile(rightexp, idstack, ???) ++ List(op match {
             case PlusBinOp() => Add
             case MinusBinOp() => Sub
             case MultBinOp() => Mul
@@ -34,21 +52,30 @@ object Compiler {
             case _ => throw new CompilerError(e)
           })
         case UnOpExp(op, exp) =>
-          compile(exp, idstack) ++ List(op match {
+          compile(exp, idstack, ???) ++ List(op match {
             case NegUnOp() => Neg
             case NotUnOp() => ???
           })
         case IfThenElseExp(condexp, thenexp, elseexp) =>
-          compile(condexp, idstack) ++ List(Branch(compile(thenexp, idstack), compile(elseexp, idstack)))
-        case BlockExp(vals, Nil, Nil, Nil, List(exp)) =>
+          compile(condexp, idstack, ???) ++ List(Branch(compile(thenexp, idstack, ???), compile(elseexp, idstack, ???)))
+        case WhileExp(cond, body) =>
+          List(Loop(compile(cond, idstack, ???), compile(body, idstack, ???)), Unit)
+        case BlockExp(vals, vars, defs, Nil, exps) =>
           ???
         case VarExp(x) =>
           ???
+        case AssignmentExp(x, exp) =>
+          ???
+        case LambdaExp(params, body) =>
+          compileFun(params, body, Vars.freeVars(e).toList.sorted, Nil, idstack)
+        case CallExp(funexp, args) =>
+          // compile funexp and args, and then add a Call instruction
+          compile(funexp, idstack, ???) ++ args.flatMap(arg => compile(arg, idstack, ???)) ++ List(Call(args.length, tailpos))
         case _ => throw new CompilerError(e)
       }
 
     val freeids = Vars.freeVars(e).toList.sorted
-    Executable(freeids, compile(e, freeids))
+    Executable(freeids, compile(e, freeids.map(x => IdDesc(x, mutable = false)), ???))
   }
 
   class CompilerError(node: AstNode) extends MiniScalaError(s"Sorry, I don't know how to compile $node", node.pos)
diff --git a/src/miniscala/Main.scala b/src/miniscala/Main.scala
index 576e325..2effbae 100644
--- a/src/miniscala/Main.scala
+++ b/src/miniscala/Main.scala
@@ -18,8 +18,10 @@ object Main {
         val bin = Files.load(Options.file)
         println(s"Executable (symbolic form): $bin")
         val initialEnv = AbstractMachine.makeInitialEnv(bin)
-        val result = AbstractMachine.execute(bin, initialEnv)
-        println(s"Output: $result")
+        time {
+          val result = AbstractMachine.execute(bin, initialEnv)
+          println(s"Output: $result")
+        }
 
       } else {
 
@@ -39,8 +41,10 @@ object Main {
         // execute the program, if enabled
         if (Options.run) {
           val initialEnv = Interpreter.makeInitialEnv(program)
-          val (result, _) = Interpreter.eval(program, initialEnv, Map(), Map())
-          println(s"Output: ${Interpreter.valueToString(result)}")
+          time {
+            val (result, _) = Interpreter.eval(program, initialEnv, Map(), Map())
+            println(s"Output: ${Interpreter.valueToString(result)}")
+          }
         }
 
         // compile to abstract machine code, if enabled
@@ -62,4 +66,11 @@ object Main {
         println(e.getMessage)
     }
   }
+
+  def time(block: => Unit) = {
+    val t0 = System.nanoTime()
+    block
+    val t1 = System.nanoTime()
+    println("Elapsed time: " + (t1 - t0)/1000000 + "ms")
+  }
 }
