diff --git a/src/miniscala/Ast.scala b/src/miniscala/Ast.scala
index 8c459a1..e83c103 100644
--- a/src/miniscala/Ast.scala
+++ b/src/miniscala/Ast.scala
@@ -17,6 +17,8 @@ object Ast {
     */
   type Var = String
 
+  type Fun = String
+
   /**
     * Expressions (excluding literals).
     */
@@ -30,12 +32,14 @@ object Ast {
 
   case class IfThenElseExp(condexp: Exp, thenexp: Exp, elseexp: Exp) extends Exp
 
-  case class BlockExp(vals: List[ValDecl], exp: Exp) extends Exp
+  case class BlockExp(vals: List[ValDecl], defs: List[DefDecl], exp: Exp) extends Exp
 
   case class TupleExp(exps: List[Exp]) extends Exp
 
   case class MatchExp(exp: Exp, cases: List[MatchCase]) extends Exp
 
+  case class CallExp(fun: Fun, args: List[Exp]) extends Exp
+
   /**
     * Literals.
     */
@@ -92,6 +96,13 @@ object Ast {
 
   case class ValDecl(x: Var, opttype: Option[Type], exp: Exp) extends Decl
 
+  case class DefDecl(fun: Fun, params: List[FunParam], optrestype: Option[Type], body: Exp) extends Decl
+
+  /**
+    * Function parameters.
+    */
+  case class FunParam(x: Var, opttype: Option[Type]) extends AstNode
+
   /**
     * Match cases.
     */
diff --git a/src/miniscala/Interpreter.scala b/src/miniscala/Interpreter.scala
index e68bebf..6e3b206 100644
--- a/src/miniscala/Interpreter.scala
+++ b/src/miniscala/Interpreter.scala
@@ -17,9 +17,13 @@ object Interpreter {
   case class StringVal(v: String) extends Val
   case class TupleVal(vs: List[Val]) extends Val
 
+  case class Closure(params: List[FunParam], optrestype: Option[Type], body: Exp, venv: VarEnv, fenv: FunEnv)
+
   type VarEnv = Map[Var, Val]
 
-  def eval(e: Exp, venv: VarEnv): Val = e match {
+  type FunEnv = Map[Fun, Closure]
+
+  def eval(e: Exp, venv: VarEnv, fenv: FunEnv): Val = e match {
     case IntLit(c) => IntVal(c)
     case BoolLit(c) => ???
     case FloatLit(c) => ???
@@ -27,8 +31,8 @@ object Interpreter {
     case VarExp(x) =>
       venv.getOrElse(x, throw new InterpreterError(s"Unknown identifier '$x'", e))
     case BinOpExp(leftexp, op, rightexp) =>
-      val leftval = eval(leftexp, venv)
-      val rightval = eval(rightexp, venv)
+      val leftval = eval(leftexp, venv, fenv)
+      val rightval = eval(rightexp, venv, fenv)
       op match {
         case PlusBinOp() =>
           (leftval, rightval) match {
@@ -64,7 +68,7 @@ object Interpreter {
         case OrBinOp() => ???
       }
     case UnOpExp(op, exp) =>
-      val expval = eval(exp, venv)
+      val expval = eval(exp, venv, fenv)
       op match {
         case NegUnOp() =>
           expval match {
@@ -75,20 +79,23 @@ object Interpreter {
         case NotUnOp() => ???
       }
     case IfThenElseExp(condexp, thenexp, elseexp) => ???
-    case BlockExp(vals, exp) =>
+    case BlockExp(vals, defs, exp) =>
       var venv1 = venv
       for (d <- vals) {
-        val v = eval(d.exp, venv1)
+        val v = eval(d.exp, venv1, fenv)
         venv1 = venv1 + (d.x -> v)
       }
-      eval(exp, venv1)
+      var fenv1 = fenv
+      for (d <- defs)
+        ???
+      eval(exp, venv1, fenv1)
     case TupleExp(exps) =>
       var vals = List[Val]()
       for (exp <- exps)
-        vals = eval(exp, venv) :: vals
+        vals = eval(exp, venv, fenv) :: vals
       TupleVal(vals.reverse)
     case MatchExp(exp, cases) =>
-      val expval = eval(exp, venv)
+      val expval = eval(exp, venv, fenv)
       expval match {
         case TupleVal(vs) =>
           for (c <- cases) {
@@ -99,6 +106,8 @@ object Interpreter {
           throw new InterpreterError(s"No case matches value ${valueToString(expval)}", e)
         case _ => throw new InterpreterError(s"Tuple expected at match, found ${valueToString(expval)}", e)
       }
+    case CallExp(fun, args) =>
+      ???
   }
 
   /**
diff --git a/src/miniscala/Main.scala b/src/miniscala/Main.scala
index 02f9083..4e35e09 100644
--- a/src/miniscala/Main.scala
+++ b/src/miniscala/Main.scala
@@ -23,13 +23,15 @@ object Main {
       // type check the program, if enabled
       if (Options.types) {
         val initialVarTypeEnv = TypeChecker.makeInitialVarTypeEnv(program)
-        TypeChecker.typeCheck(program, initialVarTypeEnv)
+        val initialFunTypeEnv: TypeChecker.FunTypeEnv = Map()
+        TypeChecker.typeCheck(program, initialVarTypeEnv, initialFunTypeEnv)
       }
 
       // execute the program, if enabled
       if (Options.run) {
         val initialVarEnv = Interpreter.makeInitialVarEnv(program)
-        val result = Interpreter.eval(program, initialVarEnv)
+        val initialFunEnv: Interpreter.FunEnv = Map()
+        val result = Interpreter.eval(program, initialVarEnv, initialFunEnv)
         println(s"Output: ${Interpreter.valueToString(result)}")
       }
 
diff --git a/src/miniscala/TypeChecker.scala b/src/miniscala/TypeChecker.scala
index 4bc81a5..b395549 100644
--- a/src/miniscala/TypeChecker.scala
+++ b/src/miniscala/TypeChecker.scala
@@ -10,15 +10,17 @@ object TypeChecker {
 
   type VarTypeEnv = Map[Var, Type]
 
-  def typeCheck(e: Exp, vtenv: VarTypeEnv): Type = e match {
+  type FunTypeEnv = Map[Fun, (List[Type], Type)]
+
+  def typeCheck(e: Exp, vtenv: VarTypeEnv, ftenv: FunTypeEnv): Type = e match {
     case IntLit(_) => IntType()
     case BoolLit(_) => ???
     case FloatLit(_) => ???
     case StringLit(_) => ???
     case VarExp(x) => ???
     case BinOpExp(leftexp, op, rightexp) =>
-      val lefttype = typeCheck(leftexp, vtenv)
-      val righttype = typeCheck(rightexp, vtenv)
+      val lefttype = typeCheck(leftexp, vtenv, ftenv)
+      val righttype = typeCheck(rightexp, vtenv, ftenv)
       op match {
         case PlusBinOp() =>
           (lefttype, righttype) match {
@@ -40,17 +42,17 @@ object TypeChecker {
       }
     case UnOpExp(op, exp) => ???
     case IfThenElseExp(condexp, thenexp, elseexp) => ???
-    case BlockExp(vals, exp) =>
-      var vtenv1 = vtenv
+    case BlockExp(vals, defs, exp) =>
+      var tenv = (vtenv, ftenv)
       for (d <- vals) {
-        val t = typeCheck(d.exp, vtenv1)
+        val t = typeCheck(d.exp, tenv._1, tenv._2)
         checkTypesEqual(t, d.opttype, d)
-        vtenv1 = vtenv1 + (d.x -> d.opttype.getOrElse(t))
+        tenv = (tenv._1 + (d.x -> d.opttype.getOrElse(t)), tenv._2)
       }
       ???
     case TupleExp(exps) => TupleType(???)
     case MatchExp(exp, cases) =>
-      val exptype = typeCheck(exp, vtenv)
+      val exptype = typeCheck(exp, vtenv, ftenv)
       exptype match {
         case TupleType(ts) =>
           for (c <- cases) {
@@ -61,9 +63,18 @@ object TypeChecker {
           throw new TypeError(s"No case matches type ${unparse(exptype)}", e)
         case _ => throw new TypeError(s"Tuple expected at match, found ${unparse(exptype)}", e)
       }
+    case CallExp(fun, args) =>
+      ???
   }
 
   /**
+    * Returns the parameter types and return type for the function declaration `d`.
+    */
+  def getFunType(d: DefDecl): (List[Type], Type) =
+    (d.params.map(p => p.opttype.getOrElse(throw new TypeError(s"Type annotation missing at parameter ${p.x}", p))),
+      d.optrestype.getOrElse(throw new TypeError(s"Type annotation missing at function result ${d.fun}", d)))
+
+  /**
     * Checks that the types `t1` and `ot2` are equal (if present), throws type error exception otherwise.
     */
   def checkTypesEqual(t1: Type, ot2: Option[Type], n: AstNode): Unit = ot2 match {
diff --git a/src/miniscala/Vars.scala b/src/miniscala/Vars.scala
index a349202..ca1bb93 100644
--- a/src/miniscala/Vars.scala
+++ b/src/miniscala/Vars.scala
@@ -13,8 +13,12 @@ object Vars {
     case BinOpExp(leftexp, _, rightexp) => freeVars(leftexp) ++ freeVars(rightexp)
     case UnOpExp(_, exp) => freeVars(exp)
     case IfThenElseExp(condexp, thenexp, elseexp) => freeVars(condexp) ++ freeVars(thenexp) ++ freeVars(elseexp)
-    case BlockExp(vals, exp) =>
+    case BlockExp(vals, defs, exp) =>
       var fv = freeVars(exp)
+      for (d <- defs)
+        fv = fv ++ freeVars(d)
+      for (d <- defs)
+        fv = fv -- declaredVars(d)
       for (d <- vals.reverse)
         fv = fv -- declaredVars(d) ++ freeVars(d)
       fv
@@ -28,13 +32,17 @@ object Vars {
       for (c <- cases)
         fv = fv ++ (freeVars(c.exp) -- c.pattern)
       fv
+    case CallExp(_, args) =>
+      ???
   }
 
   def freeVars(decl: Decl): Set[Var] = decl match {
     case ValDecl(_, _, exp) => freeVars(exp)
+    case DefDecl(_, params, _, body) => freeVars(body) -- params.map(p => p.x)
   }
 
   def declaredVars(decl: Decl): Set[Var] = decl match {
     case ValDecl(x, _, _) => Set(x)
+    case DefDecl(_, _, _, _) => Set()
   }
 }
diff --git a/src/miniscala/parser/Parser.scala b/src/miniscala/parser/Parser.scala
index f8ad80e..6adb2a7 100644
--- a/src/miniscala/parser/Parser.scala
+++ b/src/miniscala/parser/Parser.scala
@@ -31,6 +31,7 @@ object Parser extends PackratParsers {
           expr(x - 1)
       case -1 =>
         unopexp |
+          call |
           tupleexp |
           expr(-2)
       case -2 =>
@@ -64,17 +65,20 @@ object Parser extends PackratParsers {
     }
   }
 
-  private lazy val blockel: PackratParser[AstNode] = valdecl
+  private lazy val blockel: PackratParser[AstNode] = valdecl | defdecl
 
   private lazy val blockelmseq: PackratParser[List[AstNode]] = rep { blockel ~ SEMICOLON() } ^^ (_.map(_._1))
 
-  type BlockTupleType = List[ValDecl]
+  type BlockTupleType = Tuple2[List[ValDecl], List[DefDecl]]
 
   private def validBlock[T](l: List[T]): Option[BlockTupleType] = {
     // Matchers for each part of the block
     val matchers = List[Function[T, Boolean]](
       { case _: ValDecl => true
       case _ => false
+      },
+      { case _: DefDecl => true
+      case _ => false
       })
     // Extractor of the various parts of the block
     val (remaining, splits) = matchers.foldLeft((l, List[List[T]]())) { case ((list: List[T], outcome: List[List[T]]), matcher) =>
@@ -82,20 +86,34 @@ object Parser extends PackratParsers {
       (list.drop(sublist.size), sublist :: outcome)
     }
     val items = splits.reverse
-    if (remaining.isEmpty) Some(
-      items(0).map(_.asInstanceOf[ValDecl])
+    if (remaining.isEmpty) Some((
+      items(0).map(_.asInstanceOf[ValDecl]),
+      items(1).map(_.asInstanceOf[DefDecl]))
     )
     else None
   }
 
   private lazy val block: PackratParser[BlockExp] = positioned {
-    ((LEFT_BRACE() ~ blockelmseq ~ expr() ~ RIGHT_BRACE()) ^^ {case _ ~ l ~ exp ~ _ => validBlock(l).map(t => BlockExp(t, exp)) } filter(_.isDefined)) ^^ {_.get}
+    ((LEFT_BRACE() ~ blockelmseq ~ expr() ~ RIGHT_BRACE()) ^^ {case _ ~ l ~ exp ~ _ => validBlock(l).map(t => BlockExp(t._1, t._2, exp)) } filter(_.isDefined)) ^^ {_.get}
+  }
+
+  private lazy val call: PackratParser[Exp] = positioned {
+    (identifier ~ appl) ^^ { case id ~ args => CallExp(id.str, args) }
   }
 
+  private lazy val appl: PackratParser[List[Exp]] = (LEFT_PAREN() ~ repsep(expr(), COMMA()) ~ RIGHT_PAREN()) ^^ { case _ ~ apps ~ _ => apps }
+
   private lazy val valdecl: PackratParser[Decl] = positioned {
     (VVAL() ~ identifier ~ opttypeannotation ~ EQ() ~ expr()) ^^ { case _ ~ id ~ t ~ _ ~ exp => ValDecl(id.str, t, exp) }
   }
 
+  private lazy val defdecl: PackratParser[Decl] = positioned {
+    (DDEF() ~ identifier ~ LEFT_PAREN() ~ repsep(identifier ~ opttypeannotation, COMMA()) ~ RIGHT_PAREN() ~ opttypeannotation ~ EQ() ~ expr()) ^^ {
+      case _ ~ id ~ _ ~ identifiers ~ _ ~ retType ~ _ ~ exp =>
+        DefDecl(id.str, identifiers.map(p => FunParam(p._1.str, p._2).setPos(p._1.pos)), retType, exp)
+    }
+  }
+
   private lazy val opttypeannotation: PackratParser[Option[Type]] =
     opt { (COLON() ~ typeannotation) ^^ { case _ ~ ta => ta }  }
 
