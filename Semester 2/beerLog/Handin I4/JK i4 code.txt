\\Question 1
method merge(a:array<int>,b:array<int>,c:array<int>)
modifies c // declares that merge writes in array c
requires a.Length >0 && b.Length >0 && c.Length >0
requires a.Length+b.Length == c.Length
{ var i:int := 0;
	var j:int := 0;
	var k:int := 0;
	while (k<c.Length)
	invariant i+j==k
	{ if (i>=a.Length || (j<b.Length && b[j]<=a[i]))
		{ c[k] := b[j];
			j := j+1;
		}
		else
		{ c[k] := a[i];
			i := i+1;
		}
		k := k+1;
} }

\\Question 2
function sorted(a:array<int>):bool
reads a
{
forall j, k :: 0 <= j < k < a.Length ==> a[j] <= a[k]
}
predicate sorted(a:array<int>)
reads a
{
forall j, k :: 0 <= j < k < a.Length ==> a[j] <= a[k]
}

\\Question 3
method merged(a:array<int>,b:array<int>,c:array<int>)
modifies c // declares that merge writes in array c
requires sorted(a)
requires sorted(b)
ensures sorted(c)
requires a.Length >0 && b.Length >0 && c.Length >0
requires a.Length + b.Length == c.Length
{ var i:int := 0;
	var j:int := 0;
	var k:int := 0;
	while (k<c.Length)
	invariant i+j==k
	invariant 0<=k<=c.Length
	invariant forall g :: i<=g<a.Length&&k>0 ==> c[k-1]<=a[g]
	invariant forall g :: j<=g<b.Length&&k>0 ==> c[k-1]<=b[g]
	invariant forall g :: ((0<=g<k)) ==> c[g]<=c[k-1]
	invariant forall h,g :: 0<=h<g<k ==> c[h]<=c[g]
	{ if (i>=a.Length || (j<b.Length && b[j]<=a[i]))
		{ c[k] := b[j];
			j := j+1;
		}
		else
		{ c[k] := a[i];
			i := i+1;
		}
		k := k+1;
} }